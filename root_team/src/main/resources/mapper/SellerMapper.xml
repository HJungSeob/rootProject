<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="root.team.com.SellerMapper">
<!-- 네임스페이스: 단지 현재 Mapper를 다른 Mapper와 구분하는 역할을 함.
	DAO 클래스에서 현재 Mapper를 지저할 때 네임스페이스와 Mapper 내에 정의된
	SQL문의 id값을 이용해서 접근함 -->
	
<!-- SQL문 정의 -->

	<!-- 아이디 중복검사를 위한 select문: id값은 DAO의 메소드 이름으로 정의
		parameterType은 SQL문 실행을 위해 전달되는 값(입력값)의 타입,
		resultType은 SQL문 실행 후 반환되는 값(결과값)의 타입
		string: 내장 타입, String 클래스
		_int: 내장 타입, int 타입
		기존의 psrmt에서 사용하던 ?는 #{변수}으로 세팅됨
		변수명: 입력값의 변수명
	-->
	<select id="checkId" parameterType="string" resultType="_int">
		select count(*) from tbl_member where member_id=#{member_id}	
	</select>
	
	<!-- 회원 정보 입력을 위한 insert문
		sellerVO: maybatis-config.xml 파일에 사용자정의 별칭으로 정의해 놓은 내장 타입
		insert, update, delete문은 실행 후 적용한 행(row)수를 결과값을 반환하기 때문
		별도의 resultType을 정의하지 않아도 됨.
		SQL구문 내에 사용되는 #{변수}에서 변수는 입력 객체의 필드를 의미하며 MyBatis가 내부적으로 get메소드로 세팅해줌
	 -->
	<insert id="sellerJoin" parameterType="sellerVO">
		insert into tb_seller (s_businessnum, s_pw, s_name, s_email, s_tel, s_birth)
			values(#{s_businessnum}, #{s_pw}, #{s_name}, #{s_email}, #{s_tel}, #{s_birth})
			
	</insert>
	
	<!-- 모든 회원정보 가져오기: select -->
	<select id="getMembers" resultType="sellerVO">
		select * from tb_buyer	
	</select>
	
	<!-- 회원정보 수정하기: update -->
	<update id="updateMember" parameterType="sellerVO">
		update tbl_member  
			set member_pw=#{member_pw}, member_name=#{member_name}, 
				handphone=#{handphone}, email=#{email}, last_modified_date=now()
			where m_idx=#{m_idx}
	</update>
	
	<!-- 한 명의 회원정보 가져오기: select -->
	<select id="getMember" parameterType="_int" resultType="sellerVO">
		select * from tbl_member where m_idx = #{m_idx}
	</select>
	
	<!-- 로그인 처리하기: select -->
	<select id="login" parameterType="string" resultType="sellerVO">
		select * from tbl_member where member_id=#{member_id} 	
	</select>
	
	<!-- 비밀번호 가져오기: select -->
	<select id="getPassword" parameterType="string" resultType="string">
		select member_pw from tbl_member where member_id=#{member_id} and cancel_or_not=0
	</select>
	
	<!-- 회원 탈퇴 처리하기: update -->
	<update id="cancel" parameterType="_int">
		update tbl_member set cancel_or_not=-1, last_modified_date=now() where m_idx= #{m_idx}
	</update>
	
	
</mapper>